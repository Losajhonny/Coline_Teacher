%option noyywrap
%{
#include "parser.h"
%}
ENTERO          [0-9]+
DECIMAL         [0-9]+"."[0-9]+
CARACTER        ['][^\n\'][']
CADENA          ["][^\n\"]+["]
ID              [A-Za-z][A-Za-z0-9"_"]+
%%
"+"             {strcpy(yylval.TEXT, yytext); return tk_mas;}
"-"             {strcpy(yylval.TEXT, yytext); return tk_menos;}
"*"             {strcpy(yylval.TEXT, yytext); return tk_por;}
"/"             {strcpy(yylval.TEXT, yytext); return tk_div;}
"^"             {strcpy(yylval.TEXT, yytext); return tk_pot;}

"("             {strcpy(yylval.TEXT, yytext); return pari;}
")"             {strcpy(yylval.TEXT, yytext); return pard;}
"{"             {strcpy(yylval.TEXT, yytext); return llai;}
"}"             {strcpy(yylval.TEXT, yytext); return llad;}

":"             {strcpy(yylval.TEXT, yytext); return dospuntos;}
"="             {strcpy(yylval.TEXT, yytext); return igual;}
";"             {strcpy(yylval.TEXT, yytext); return ptcoma;}

"verdadero"     {strcpy(yylval.TEXT, yytext); return pr_verdadero;}
"falso"         {strcpy(yylval.TEXT, yytext); return pr_falso;}
"selecciona"    {strcpy(yylval.TEXT, yytext); return pr_selecciona;}
"caso"          {strcpy(yylval.TEXT, yytext); return pr_caso;}
"default"       {strcpy(yylval.TEXT, yytext); return pr_default;}

"mientras"      {strcpy(yylval.TEXT, yytext); return pr_mientras;}
"hacer"         {strcpy(yylval.TEXT, yytext); return pr_hacer;}
"para"          {strcpy(yylval.TEXT, yytext); return pr_para;}
"imprimir"      {strcpy(yylval.TEXT, yytext); return pr_imprimir;}


"entero"        {strcpy(yylval.TEXT, yytext); return pr_entero;}
"decimal"       {strcpy(yylval.TEXT, yytext); return pr_decimal;}
"booleano"      {strcpy(yylval.TEXT, yytext); return pr_booleano;}
"caracter"      {strcpy(yylval.TEXT, yytext); return pr_caracter;}
"cadena"        {strcpy(yylval.TEXT, yytext); return pr_cadena;}
"vacio"         {strcpy(yylval.TEXT, yytext); return pr_vacio;}

{ENTERO}        {strcpy(yylval.TEXT, yytext); return entero;}
{DECIMAL}       {strcpy(yylval.TEXT, yytext); return decimal;}
{CARACTER}      {strcpy(yylval.TEXT, yytext); return caracter;}
{CADENA}        {strcpy(yylval.TEXT, yytext); return cadena;}
{ID}            {strcpy(yylval.TEXT, yytext); return id;}

[[:blank:]]     {/*ignorando*/}
.               {}
%%
